(window.webpackJsonp=window.webpackJsonp||[]).push([["flutter.baseSyntax"],{Bwrz:function(s,t,a){"use strict";a.r(t);var v=a("mPS5"),_={name:"FlutterBaseSyntax",components:{md:a.n(v).a}},r=a("JFUb");var n=function(s){a("mZx6")},e=Object(r.a)(_,function(){var s=this.$createElement,t=this._self._c||s;return t("div",[t("md")],1)},[],!1,n,"data-v-4639400a",null);t.default=e.exports},cwrQ:function(s,t,a){(s.exports=a("I1BE")(!1)).push([s.i,"",""])},mPS5:function(s,t,a){s.exports=a("q+DY")},mZx6:function(s,t,a){var v=a("cwrQ");"string"==typeof v&&(v=[[s.i,v,""]]),v.locals&&(s.exports=v.locals);(0,a("SZ7m").default)("d4833388",v,!0,{})},"q+DY":function(s,t,a){"use strict";a.r(t);var v=a("JFUb"),_=Object(v.a)(null,function(){var s=this;s.$createElement;s._self._c;return s._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("section",[a("h1",[s._v("Dart 支持的数据类型")]),s._v(" "),a("table",{staticClass:"table"},[a("thead",[a("tr",[a("th",[s._v("类型")]),s._v(" "),a("th",[s._v("含义")]),s._v(" "),a("th",[s._v("使用")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",{pre:!0},[s._v("int")])]),s._v(" "),a("td",[s._v("整数，范围为 -2^63 到 2^63 - 1.")]),s._v(" "),a("td",[s._v("int x = 1; // 没有小数点就是int")])]),s._v(" "),a("tr",[a("td",[a("code",{pre:!0},[s._v("double")])]),s._v(" "),a("td",[s._v("浮点数，64位(双精度)浮点数")]),s._v(" "),a("td",[s._v("double x = 1.1; // 有小数点的就是浮点数")])]),s._v(" "),a("tr",[a("td",[a("code",{pre:!0},[s._v("num")])]),s._v(" "),a("td",[s._v("num 是数字类型，既可以表示整数，也可以表示浮点数，具体看赋的值")]),s._v(" "),a("td",[s._v("num x = 1; // num x是整数"),a("br"),s._v("num x = 1.1; // num x是浮点数")])]),s._v(" "),a("tr",[a("td",[a("code",{pre:!0},[s._v("String")])]),s._v(" "),a("td",[s._v("字符串"),a("br"),s._v(" Dart字符串采用UTF-16编码"),a("br"),s._v(" 可以使用单引号或双引号来创建字符串")]),s._v(" "),a("td",[s._v("String x = 'txt'"),a("br"),s._v(' String x = "txt"')])]),s._v(" "),a("tr",[a("td",[a("code",{pre:!0},[s._v("bool")])]),s._v(" "),a("td",[s._v("布尔值")]),s._v(" "),a("td",[s._v("bool isTrue = true;")])]),s._v(" "),a("tr",[a("td",[a("code",{pre:!0},[s._v("List")])]),s._v(" "),a("td",[s._v("List<E></br>E表示List里的数据类型"),a("br"),s._v("用中括号来赋值")]),s._v(" "),a("td",[s._v("List<String> list = ['1', '2', '3']")])]),s._v(" "),a("tr",[a("td",[a("code",{pre:!0},[s._v("Set")])]),s._v(" "),a("td",[s._v("Set<E>"),a("br"),s._v("E表示Set里的数据类型"),a("br"),s._v("用大括号来赋值")]),s._v(" "),a("td",[s._v("Set<int> set = { 1, 2, 3, 4, 5, 6 }")])]),s._v(" "),a("tr",[a("td",[a("code",{pre:!0},[s._v("Map")])]),s._v(" "),a("td",[s._v("Map<K, V>"),a("br"),s._v("K是key的数据类型，V是value的数据类型")]),s._v(" "),a("td",[s._v("Map<String, int> map = { '1': 1, '2': 2, '3': 3, '4': 4 }")])]),s._v(" "),a("tr",[a("td",[a("code",{pre:!0},[s._v("Runes")])]),s._v(" "),a("td",[s._v("表示采用 UTF-32 的字符串，用于显示 Unicode 因为Dart字符串是UTF-16，因此在Dart中表示32位的Unicode值需要Runes这个特殊语法。")]),s._v(" "),a("td",[s._v("Runes input = new Runes('\\u{1f600}');"),a("br"),s._v(" print(new String.fromCharCodes(input));"),a("br"),s._v(" 打印出来的是笑脸emoji：😆")])])])]),s._v(" "),a("p",[s._v("1、 "),a("code",{pre:!0},[s._v("var")]),s._v("也可以申明变量，一种声明变量而不指定其类型的方法。")]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-dart"}},[a("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" content = "),a("span",{attrs:{class:"hljs-string"}},[s._v("'Dart 语法'")]),s._v("; "),a("span",{attrs:{class:"hljs-comment"}},[s._v("// Declare and initialize a variable.")]),s._v("\n"),a("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" switchOn = "),a("span",{attrs:{class:"hljs-keyword"}},[s._v("false")]),s._v(";\n"),a("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" current = "),a("span",{attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n")])]),s._v(" "),a("div",{staticClass:"tip"},[a("p",[s._v("因为 ，var 并不是直接存储值，而是存储的值的对象的引用，例如：var content = 'Dart 语法' 这句，是名字为 content 的 var 变量存储了值为 'Dart 语法' 的 String 对象的引用，所以 var 才能定义任何变量。"),a("br")])]),s._v(" "),a("p",[s._v("当给"),a("code",{pre:!0},[s._v("var")]),s._v("变量赋值了之后，就确定了这个变量的数据类型，再重新赋值的时候，只能是初始赋值的数据类型。")]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-dart"}},[a("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" x = "),a("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),a("span",{attrs:{class:"hljs-comment"}},[s._v("// x只能赋值int类型")]),s._v("\nx = "),a("span",{attrs:{class:"hljs-string"}},[s._v("'1'")]),s._v("; "),a("span",{attrs:{class:"hljs-comment"}},[s._v("// ❌")]),s._v("\n")])]),s._v(" "),a("p",[s._v("2、"),a("code",{pre:!0},[s._v("$variableName")]),s._v(" 或 "),a("code",{pre:!0},[s._v("${expression}")])]),s._v(" "),a("p",[s._v("字符串插值：将变量的值直接插入字符串中。")]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-dart"}},[a("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),a("span",{attrs:{class:"hljs-string"}},[s._v("'123'")]),s._v(";\n"),a("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" b = "),a("span",{attrs:{class:"hljs-string"}},[s._v("'"),a("span",{attrs:{class:"hljs-subst"}},[s._v("${a}")]),s._v("456'")]),s._v(";\n"),a("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" c = "),a("span",{attrs:{class:"hljs-string"}},[s._v("'"),a("span",{attrs:{class:"hljs-subst"}},[s._v("$a456"),a("span",{attrs:{class:"hljs-string"}},[s._v("';\n")])])])])]),s._v(" "),a("p",[s._v("3、"),a("code",{pre:!0},[s._v("dynamic")]),s._v("（[daɪ'næmɪk]）")]),s._v(" "),a("p",[s._v("意思是数据类型是动态可变的，也可以定义任何变量，但是和"),a("code",{pre:!0},[s._v("var")]),s._v("不同的是，"),a("code",{pre:!0},[s._v("var")]),s._v("一旦赋值后，就不能改变数据类型了，但是"),a("code",{pre:!0},[s._v("dynamic")]),s._v("可以。")]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-dart"}},[a("span",{attrs:{class:"hljs-keyword"}},[s._v("dynamic")]),s._v(" x = "),a("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\nx = "),a("span",{attrs:{class:"hljs-string"}},[s._v("'12'")]),s._v("; "),a("span",{attrs:{class:"hljs-comment"}},[s._v("//✅")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"warning"},[a("p",[s._v("请不要滥用"),a("code",{pre:!0},[s._v("dynamic")]),s._v("，一般情况下都可以用"),a("code",{pre:!0},[s._v("Object")]),s._v("代替"),a("code",{pre:!0},[s._v("dynamic")]),s._v("。"),a("br"),s._v("\n什么情况下使用：当这个变量没法用 Dart 的类型来表示时，比如 Native 和 Flutter 交互，从 Native 传来的数据。所以你会看到 PlatformChannel 里有很多地方使用到了"),a("code",{pre:!0},[s._v("dynamic")]),s._v("。")])]),s._v(" "),a("p",[s._v("4、"),a("code",{pre:!0},[s._v("Object")])]),s._v(" "),a("p",[s._v("Dart 里所有东西都是对象，是因为 Dart 的所有东西都继承自"),a("code",{pre:!0},[s._v("Object")]),s._v("，因此"),a("code",{pre:!0},[s._v("Object")]),s._v("可以定义任何变量，而且赋值后，类型也可以更改。")]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-dart"}},[a("span",{attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(" x = "),a("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\nx = "),a("span",{attrs:{class:"hljs-string"}},[s._v("'12'")]),s._v("; "),a("span",{attrs:{class:"hljs-comment"}},[s._v("// ✅")]),s._v("\n")])]),s._v(" "),a("p",[s._v("5、 常量: "),a("code",{pre:!0},[s._v("final")]),s._v("和"),a("code",{pre:!0},[s._v("const")])]),s._v(" "),a("p",[s._v("如果你不想更改变量的值，那么你可以用 final 和 const:")]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-dart"}},[a("span",{attrs:{class:"hljs-keyword"}},[s._v("final")]),s._v(" x = "),a("span",{attrs:{class:"hljs-string"}},[s._v("'1'")]),s._v(";\n"),a("span",{attrs:{class:"hljs-keyword"}},[s._v("static")]),s._v(" "),a("span",{attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),a("span",{attrs:{class:"hljs-built_in"}},[s._v("bool")]),s._v(" isTrue = "),a("span",{attrs:{class:"hljs-keyword"}},[s._v("true")]),s._v(";\n")])]),s._v(" "),a("p",[s._v("常量有以下特点：")]),s._v(" "),a("ul",[a("li",[s._v("使用"),a("code",{pre:!0},[s._v("final")]),s._v("和"),a("code",{pre:!0},[s._v("const")]),s._v("的时候可以把"),a("code",{pre:!0},[s._v("var")]),s._v("省略")]),s._v(" "),a("li",[a("code",{pre:!0},[s._v("final")]),s._v("和"),a("code",{pre:!0},[s._v("const")]),s._v("变量只能赋值一次，而且只能在声明的时候就赋值")]),s._v(" "),a("li",[a("code",{pre:!0},[s._v("const")]),s._v("实际是隐式的"),a("code",{pre:!0},[s._v("final")])]),s._v(" "),a("li",[s._v("在使用"),a("code",{pre:!0},[s._v("const")]),s._v("的时候，如果变量是类里的变量，必须加"),a("code",{pre:!0},[s._v("static")]),s._v("，是全局变量时不需要加,例如:")])]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-dart"}},[s._v("mport "),a("span",{attrs:{class:"hljs-string"}},[s._v("'package:flutter/material.dart'")]),s._v(";\n\n"),a("span",{attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" demoConst = "),a("span",{attrs:{class:"hljs-string"}},[s._v("'demo'")]),s._v("; "),a("span",{attrs:{class:"hljs-comment"}},[s._v("// 这里不用加 static")]),s._v("\n\n"),a("span",{attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" main() => runApp(MyApp());\n\n"),a("span",{attrs:{class:"hljs-class"}},[a("span",{attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),a("span",{attrs:{class:"hljs-title"}},[s._v("MyApp")]),s._v(" "),a("span",{attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" "),a("span",{attrs:{class:"hljs-title"}},[s._v("StatelessWidget")]),s._v(" ")]),s._v("{\n  "),a("span",{attrs:{class:"hljs-keyword"}},[s._v("static")]),s._v(" "),a("span",{attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" content = "),a("span",{attrs:{class:"hljs-string"}},[s._v("'Dart 语法'")]),s._v("; "),a("span",{attrs:{class:"hljs-comment"}},[s._v("// 这里必须加 static")]),s._v("\n}\n")])]),s._v(" "),a("div",{staticClass:"tip"},[a("p",[s._v("以下划线"),a("code",{pre:!0},[s._v("_")]),s._v("开头的类或成员变量是私有的。"),a("br"),s._v("\nDart 没有 Public、Protected、Private 的关键字，在 Dart 里，类或成员变量默认都是 Public 的，以下划线 _ 开头的就是私有的，例如成员变量 _name 就是私有的。")])]),s._v(" "),a("h1",[s._v("函数")]),s._v(" "),a("p",[s._v("函数的格式如下：")]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-javascript"}},[s._v("返回类型 函数名(函数参数){\n\n}\n")])]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-dart"}},[a("span",{attrs:{class:"hljs-built_in"}},[s._v("bool")]),s._v(" say ("),a("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" content) {\n  "),a("span",{attrs:{class:"hljs-built_in"}},[s._v("print")]),s._v("(content);\n  "),a("span",{attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),a("span",{attrs:{class:"hljs-keyword"}},[s._v("true")]),s._v(";\n}\n")])]),s._v(" "),a("p",[s._v("1、函数的类型是"),a("code",{pre:!0},[s._v("Function")])]),s._v(" "),a("p",[s._v("判断函数"),a("code",{pre:!0},[s._v("say")]),s._v("的类型是不是"),a("code",{pre:!0},[s._v("Function")]),s._v("，用"),a("code",{pre:!0},[s._v("is")]),s._v("来判断。")]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-dart"}},[a("span",{attrs:{class:"hljs-built_in"}},[s._v("print")]),s._v("(say "),a("span",{attrs:{class:"hljs-keyword"}},[s._v("is")]),s._v(" "),a("span",{attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v("); "),a("span",{attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("p",[s._v("2、必选参数和可选参数")]),s._v(" "),a("p",[s._v("判断是必选参数还是可选参数：首先必选参数在前面，和普通的参数定义一样，后面跟可选参数，可选参数需要用"),a("code",{pre:!0},[s._v("{}")]),s._v("或者"),a("code",{pre:!0},[s._v("[]")]),s._v("包起来，用不同的括号，可选参数的意义与用法也不一样。")]),s._v(" "),a("p",[a("strong",[s._v("可选参数也分为两类：")])]),s._v(" "),a("p",[s._v("1、可选命名参数：使用 "),a("code",{pre:!0},[s._v("{}")]),s._v(" 包起来的参数是可选命名参数。")]),s._v(" "),a("p",[s._v("2、可选位置参数：使用 "),a("code",{pre:!0},[s._v("[]")]),s._v(" 包起来的参数是可选位置参数。")]),s._v(" "),a("ul",[a("li",[s._v("可选命名参数："),a("code",{pre:!0},[s._v("{}")])])]),s._v(" "),a("p",[s._v("用 "),a("code",{pre:!0},[s._v("{}")]),s._v(" 包起来的参数是可选命名参数，前面讲数据类型的时候，使用 "),a("code",{pre:!0},[s._v("{}")]),s._v(" 来赋值的数据类型是 "),a("code",{pre:!0},[s._v("Map")]),s._v("，所以可选的命名参数的类型也是 "),a("code",{pre:!0},[s._v("Map")]),s._v("， 因此调用函数时，可选参数的赋值必须是 "),a("code",{pre:!0},[s._v("paramName: value")]),s._v(" 这种 "),a("code",{pre:!0},[s._v("key: value")]),s._v(" 格式的，下面是可选命名参数的例子：")]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-dart"}},[a("span",{attrs:{class:"hljs-built_in"}},[s._v("bool")]),s._v(" say("),a("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" msg , {"),a("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" from, "),a("span",{attrs:{class:"hljs-built_in"}},[s._v("int")]),s._v(" clock}){\n  "),a("span",{attrs:{class:"hljs-built_in"}},[s._v("print")]),s._v("(msg+"),a("span",{attrs:{class:"hljs-string"}},[s._v('" from "')]),s._v(" + from + "),a("span",{attrs:{class:"hljs-string"}},[s._v('" at "')]),s._v(" + clock.toString());\n  "),a("span",{attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),a("span",{attrs:{class:"hljs-keyword"}},[s._v("true")]),s._v(";\n}\n")])]),s._v(" "),a("p",[s._v("要调用 "),a("code",{pre:!0},[s._v("say")]),s._v(" 函数，方法如下：")]),s._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-dart"}},[s._v("say("),a("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v("); "),a("span",{attrs:{class:"hljs-comment"}},[s._v("//✅ 因为 from 和 clock 是可选参数，所以可以不填")]),s._v("\n\nsay("),a("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v(",from: "),a("span",{attrs:{class:"hljs-string"}},[s._v("'XiaoMing'")]),s._v("); "),a("span",{attrs:{class:"hljs-comment"}},[s._v("//对 用命名参数格式 paramName: value 为 from 赋值")]),s._v("\nsay("),a("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v(",clock: "),a("span",{attrs:{class:"hljs-number"}},[s._v("11")]),s._v("); "),a("span",{attrs:{class:"hljs-comment"}},[s._v("//✅")]),s._v("\nsay("),a("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v(",from: "),a("span",{attrs:{class:"hljs-string"}},[s._v("'XiaoMing'")]),s._v(",clock: "),a("span",{attrs:{class:"hljs-number"}},[s._v("11")]),s._v("); "),a("span",{attrs:{class:"hljs-comment"}},[s._v("//✅")]),s._v("\n")])])])}],!1,null,null,null);t.default=_.exports}}]);