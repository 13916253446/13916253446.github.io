(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{"7LKo":function(t,e,s){t.exports=s("FYfA")},AFbl:function(t,e,s){(t.exports=s("I1BE")(!1)).push([t.i,"",""])},FYfA:function(t,e,s){"use strict";s.r(e);var l=s("JFUb"),r=Object(l.a)(null,function(){var t=this;t.$createElement;t._self._c;return t._m(0)},[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("section",[s("div",{staticClass:"tip"},[s("p",[t._v("查看所有"),s("strong",[t._v("已经")]),t._v("合并到当前分支的分支列表")])]),t._v(" "),s("pre",{pre:!0},[s("code",{attrs:{class:"hljs language-shell"}},[t._v("git branch --merged\n")])]),t._v(" "),s("div",{staticClass:"tip"},[s("p",[t._v("查看所有"),s("strong",[t._v("没有")]),t._v("合并到当前分支的分支列表")])]),t._v(" "),s("pre",{pre:!0},[s("code",{attrs:{class:"hljs language-shell"}},[t._v("git branch --no-merged\n")])]),t._v(" "),s("div",{staticClass:"tip"},[s("p",[t._v("查找哪一次代码提交引入了错误")])]),t._v(" "),s("p",[t._v('它的原理很简单，就是将代码提交的历史，按照两分法不断缩小定位。所谓"两分法"，就是将代码历史一分为二，确定问题出在前半部分，还是后半部分，不断执行这个过程，直到范围缩小到某一次代码提交')]),t._v(" "),s("p",[s("strong",[t._v("网页上是一个计数器，有两个按钮。点击+号按钮，可以看到计数器没有递增，反而递减，这说明代码有问题。")])]),t._v(" "),s("pre",{pre:!0},[s("code",{attrs:{class:"hljs language-shell"}},[t._v("git log --pretty=oneline\n")])]),t._v(" "),s("p",[t._v("可以看到，这个库一共有101次提交。最早的第一次提交的哈希是"),s("code",{pre:!0},[t._v("4d83cf")]),t._v("。")]),t._v(" "),s("p",[s("code",{pre:!0},[t._v("git bisect start")]),t._v("命令启动查错，它的格式如下:")]),t._v(" "),s("pre",{pre:!0},[s("code",{attrs:{class:"hljs language-shell"}},[t._v("git bisect start [终点] [起点]\n\ngit bisect start HEAD 4d83cf\n")])]),t._v(" "),s("p",[t._v('面代码中，"终点"是最近的提交，"起点"是更久以前的提交。它们之间的这段历史，就是差错的范围。')]),t._v(" "),s("p",[t._v("这个例子中，我们选择全部的代码历史。起点是第一次提交4d83cf，终点是最近一次的HEAD。当然，指定其他范围也可以。")]),t._v(" "),s("p",[t._v("执行上面的命令以后，代码库就会切换到这段范围正当中的那一次提交，本例是第51次提交。")]),t._v(" "),s("p",[t._v("现在刷新浏览器，点击+按钮，发现可以正常递增。使用"),s("code",{pre:!0},[t._v("git bisect good")]),t._v("命令，标识本次提交（第51次）没有问题。")]),t._v(" "),s("pre",{pre:!0},[s("code",{attrs:{class:"hljs language-shell"}},[t._v("git bisect good\n")])]),t._v(" "),s("p",[t._v("既然第51次提交没有问题，就意味着错误是在代码历史的后半段引入的。执行上面的命令，Git 就自动切换到后半段的中点（第76次提交）。")]),t._v(" "),s("p",[t._v("现在刷新浏览器，点击+按钮，发现不能正常递增。使用"),s("code",{pre:!0},[t._v("git bisect bad")]),t._v("命令，标识本次提交（第76）有问题。")]),t._v(" "),s("pre",{pre:!0},[s("code",{attrs:{class:"hljs language-shell"}},[t._v("git bisect bad\n")])]),t._v(" "),s("p",[t._v("执行上面的命令以后，Git 就自动切换到第51次到第76次的中点（第63次提交）。")]),t._v(" "),s("p",[t._v("接下来，不断重复这个过程，直到成功找到出问题的那一次提交为止。这时，Git 会给出如下的提示。")]),t._v(" "),s("pre",{pre:!0},[s("code",{attrs:{class:"hljs language-shell"}},[t._v("b47892 is the first bad commit\n")])]),t._v(" "),s("p",[t._v("然后，使用git bisect reset命令，退出查错，回到最近一次的代码提交。")]),t._v(" "),s("pre",{pre:!0},[s("code",{attrs:{class:"hljs language-shell"}},[t._v("git bisect reset\n")])])])}],!1,null,null,null);e.default=r.exports},RsL5:function(t,e,s){"use strict";s.r(e);var l=s("7LKo"),r={name:"GithubGitOften",components:{md:s.n(l).a}},v=s("JFUb");var a=function(t){s("r7go")},n=Object(v.a)(r,function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("md")],1)},[],!1,a,"data-v-56c08178",null);e.default=n.exports},r7go:function(t,e,s){var l=s("AFbl");"string"==typeof l&&(l=[[t.i,l,""]]),l.locals&&(t.exports=l.locals);(0,s("SZ7m").default)("53375114",l,!0,{})}}]);