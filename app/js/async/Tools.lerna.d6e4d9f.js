(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{"1SUO":function(e,s,a){"use strict";a.r(s);var n=a("QhUf"),t={name:"ToolsLerna",components:{md:a.n(n).a}},r=a("JFUb");var v=function(e){a("Z3He")},l=Object(r.a)(t,function(){var e=this.$createElement,s=this._self._c||e;return s("div",[s("md")],1)},[],!1,v,"data-v-08eef956",null);s.default=l.exports},"1XE3":function(e,s,a){"use strict";a.r(s);var n=a("JFUb"),t=Object(n.a)(null,function(){var e=this;e.$createElement;e._self._c;return e._m(0)},[function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("section",[a("h1",[e._v("初始化项目")]),e._v(" "),a("p",[e._v("为了避免"),a("code",{pre:!0},[e._v("lerna")]),e._v("版本不一致，所以讲"),a("code",{pre:!0},[e._v("lerna")]),e._v("安装为项目依赖，而不是全局安装")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("$ npx lerna init\n")])]),e._v(" "),a("p",[e._v("这将创建"),a("code",{pre:!0},[e._v("lerna.json")]),e._v("配置文件和"),a("code",{pre:!0},[e._v("packages")]),e._v("文件夹")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-javascript"}},[e._v("lerna-repo/\n  packages/\n  package.json\n  lerna.json\n")])]),e._v(" "),a("h1",[e._v("项目管理模式")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("集中模式（"),a("strong",[e._v("默认模式")]),e._v("）")]),e._v(" "),a("p",[e._v("模块发布新版本时，都会升级到"),a("code",{pre:!0},[e._v("leran.json")]),e._v("里编写的"),a("code",{pre:!0},[e._v("version")]),e._v("字段，这是"),a("a",{attrs:{href:"https://github.com/babel/babel"}},[e._v("Babel")]),e._v("目前使用的模式。如果要自动将所有包版本绑定在一起，请使用此选项。这种方法的问题是任何包中的重大更改都将导致所有包具有新的主要版本")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("lerna init\n")])]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-json"}},[e._v("{\n  "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"packages"')]),e._v(": [\n    "),a("span",{attrs:{class:"hljs-string"}},[e._v('"packages/*"')]),e._v("\n  ],\n  "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"version"')]),e._v(": "),a("span",{attrs:{class:"hljs-string"}},[e._v('"0.0.0"')]),e._v("\n}\n")])])]),e._v(" "),a("li",[a("p",[e._v("独立模式")]),e._v(" "),a("p",[e._v("模块发布新版本时，会逐个询问需要升级的版本号，基准版本为它自身的"),a("code",{pre:!0},[e._v("package.json")]),e._v("，如果需要各个组件维护自身的版本号，那么就使用"),a("code",{pre:!0},[e._v("independent")]),e._v("模式，只需要去配置"),a("code",{pre:!0},[e._v("leran.json")]),e._v("即可。")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("lerna init --independent\n")])]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-json"}},[e._v("{\n  "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"packages"')]),e._v(": [\n    "),a("span",{attrs:{class:"hljs-string"}},[e._v('"packages/*"')]),e._v("\n  ],\n  "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"version"')]),e._v(": "),a("span",{attrs:{class:"hljs-string"}},[e._v('"independent"')]),e._v("\n} \n")])])])]),e._v(" "),a("h1",[e._v("lerna.json")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-json"}},[e._v("{\n  "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"version"')]),e._v(": "),a("span",{attrs:{class:"hljs-string"}},[e._v('"1.1.3"')]),e._v(",\n  "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"npmClient"')]),e._v(": "),a("span",{attrs:{class:"hljs-string"}},[e._v('"npm"')]),e._v(",\n  "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"command"')]),e._v(": {\n    "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"publish"')]),e._v(": {\n      "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"ignoreChanges"')]),e._v(": ["),a("span",{attrs:{class:"hljs-string"}},[e._v('"ignored-file"')]),e._v(", "),a("span",{attrs:{class:"hljs-string"}},[e._v('"*.md"')]),e._v("]\n    },\n    "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"bootstrap"')]),e._v(": {\n      "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"ignore"')]),e._v(": "),a("span",{attrs:{class:"hljs-string"}},[e._v('"component-*"')]),e._v(",\n      "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"npmClientArgs"')]),e._v(": ["),a("span",{attrs:{class:"hljs-string"}},[e._v('"--no-package-lock"')]),e._v("]\n    }\n  },\n  "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"packages"')]),e._v(": ["),a("span",{attrs:{class:"hljs-string"}},[e._v('"packages/*"')]),e._v("]\n}\n")])]),e._v(" "),a("ul",[a("li",[a("p",[a("code",{pre:!0},[e._v("version")]),e._v("：存储库的当前版本。")])]),e._v(" "),a("li",[a("p",[a("code",{pre:!0},[e._v("npmClient")]),e._v("：指定运行命令的特定客户端的选项（也可以基于每个命令指定）。也可是是"),a("code",{pre:!0},[e._v("yarn")]),e._v("使用"),a("code",{pre:!0},[e._v("yarn")]),e._v("运行所有命令。默认为"),a("code",{pre:!0},[e._v("npm")]),e._v("。")])]),e._v(" "),a("li",[a("p",[a("code",{pre:!0},[e._v("command.publish.ignoreChanges")]),e._v("："),a("code",{pre:!0},[e._v("lernam publish")]),e._v("会检查"),a("code",{pre:!0},[e._v("packages")]),e._v("目录下哪些包的文件有更新，这个配置可以忽略某些文件的修改避免发布新版本。例如：修复"),a("code",{pre:!0},[e._v("README.md")]),e._v("拼写错误")])]),e._v(" "),a("li",[a("p",[a("code",{pre:!0},[e._v("command.bootstrap.ignore")]),e._v("：忽略执行"),a("code",{pre:!0},[e._v("lerna bootstrap")]),e._v("命令时候安装的一些包")])]),e._v(" "),a("li",[a("p",[a("code",{pre:!0},[e._v("command.bootstrap.npmClientArgs")]),e._v("：字符串数组,直接传递给"),a("code",{pre:!0},[e._v("npm install")]),e._v(",作为参数. 在"),a("code",{pre:!0},[e._v("lerna bootstrap")]),e._v("命令期间")])]),e._v(" "),a("li",[a("p",[a("code",{pre:!0},[e._v("command.bootstrap.scope")]),e._v("：一组匹配模式,限制运行时安装哪些包,在"),a("code",{pre:!0},[e._v("lerna bootstrap")]),e._v("命令期间。")])]),e._v(" "),a("li",[a("p",[a("code",{pre:!0},[e._v("packages")]),e._v("：指定项目包")]),e._v(" "),a("p",[e._v("默认项目都在"),a("strong",[e._v("packages")]),e._v("目录下，你也可以把项目包放在别的目录，然后重新定义"),a("code",{pre:!0},[e._v("packages")]),e._v("字段")])])]),e._v(" "),a("h1",[e._v("lerna add")]),e._v(" "),a("p",[e._v("安装资源包到项目依赖")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("$ lerna add [@version] [--dev] [--exact]\n")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("安装资源包到所有项目")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[a("span",{attrs:{class:"hljs-comment"}},[e._v("# 安装到dependencies")]),e._v("\nlerna add webpack\n"),a("span",{attrs:{class:"hljs-comment"}},[e._v("# 安装到devDependencies")]),e._v("\nlerna add --dev webpack\n")])])]),e._v(" "),a("li",[a("p",[e._v("安装资源包到指定项目")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[a("span",{attrs:{class:"hljs-comment"}},[e._v("# 安装webpack资源包到utils项目")]),e._v("\nlerna add webpack --scope=utils\n")])])]),e._v(" "),a("li",[a("p",[e._v("安装资源包到指定规则的项目里面")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[a("span",{attrs:{class:"hljs-comment"}},[e._v("# 安装webpack资源包到前缀是test的项目里")]),e._v("\nlerna add webpack packages/test*\n")])])])]),e._v(" "),a("h1",[e._v("lerna bootstrap")]),e._v(" "),a("p",[e._v("将本地存在相互依赖的包链接在一起，然后安装剩余依赖的包")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("lerna bootstrap\n")])]),e._v(" "),a("p",[e._v("运行时此命令将：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("在所有的项目下执行"),a("code",{pre:!0},[e._v("npm install")]),e._v("安装所有的资源包")])]),e._v(" "),a("li",[a("p",[e._v("链接"),a("code",{pre:!0},[e._v("npm link")]),e._v("当前目录下所有的项目")])]),e._v(" "),a("li",[a("p",[e._v("执行已经安装资源包的项目"),a("code",{pre:!0},[e._v("npm run prepublish")])])]),e._v(" "),a("li",[a("p",[e._v("执行已经安装资源包的项目"),a("code",{pre:!0},[e._v("npm run prepare")])])])]),e._v(" "),a("h1",[e._v("lerna version")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[a("span",{attrs:{class:"hljs-comment"}},[e._v("# 自定义版本")]),e._v("\nlerna version "),a("span",{attrs:{class:"hljs-number"}},[e._v("1.0")]),e._v("."),a("span",{attrs:{class:"hljs-number"}},[e._v("1")]),e._v("\n"),a("span",{attrs:{class:"hljs-comment"}},[e._v("# 选择一种模式生成版本（patch是在原来的版本基础上加0.0.1）")]),e._v("\nlerna version patch\n"),a("span",{attrs:{class:"hljs-comment"}},[e._v("# 通过命令行选择来确定版本")]),e._v("\nlerna version\n")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://mp1.oss-cn-beijing.aliyuncs.com/blog/screely-1545557968431.png",alt:""}}),a("img",{attrs:{src:"https://mp1.oss-cn-beijing.aliyuncs.com/blog/screely-1545557968431.png",alt:""}})]),e._v(" "),a("p",[e._v("执行此命令，将执行以下操作")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("标记上一个版本以来已更新的包")]),e._v(" "),a("p",[e._v("每个项目"),a("code",{pre:!0},[e._v("package.json")]),e._v("下面有一个"),a("code",{pre:!0},[e._v("gitHead")]),e._v("标识（这个字段的值是从git暂存区取得，所以每次代码都要"),a("strong",[e._v("git commit")]),e._v("之后才有效，否则就会报没有资源包需要更新版本）")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-json"}},[e._v("{\n    "),a("span",{attrs:{class:"hljs-attr"}},[e._v('"gitHead"')]),e._v(": "),a("span",{attrs:{class:"hljs-string"}},[e._v('"46a570ebbd8e34766edd9fb8f4fad9288c7bcf30"')]),e._v("\n}\n")])])]),e._v(" "),a("li",[a("p",[e._v("提示以及选择版本号")])]),e._v(" "),a("li",[a("p",[e._v("修改项目的版本("),a("code",{pre:!0},[e._v("version")]),e._v(")以及其它元数据比如"),a("code",{pre:!0},[e._v("gitHead")])])]),e._v(" "),a("li",[a("p",[e._v("提交("),a("code",{pre:!0},[e._v("git commit")]),e._v(")这些更改")])]),e._v(" "),a("li",[a("p",[e._v("推送到"),a("code",{pre:!0},[e._v("git")]),e._v("远程服务器")])])]),e._v(" "),a("h3",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options","aria-hidden":"true"}},[e._v("¶")]),e._v(" options")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("--amend")]),e._v(" "),a("p",[e._v("使用此标记运行时，将跳过"),a("code",{pre:!0},[e._v("git push")]),e._v("并保留当前提交的更改，而不是新增一个修改("),a("strong",[e._v("没有此标记时会提交一个新的commit信息然后推送到远程服务器")]),e._v(")")]),e._v(" "),a("h1"),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("lerna version --amend\n")])])]),e._v(" "),a("li",[a("p",[e._v("--commit-hooks")]),e._v(" "),a("p",[e._v("提交版本更改时是否执行git钩子("),a("strong",[e._v("git commit hooks")]),e._v(")，默认是"),a("strong",[e._v("true")]),e._v("，可以通过"),a("code",{pre:!0},[e._v("--no-commit-hooks")]),e._v("禁用")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("lerna version\n"),a("span",{attrs:{class:"hljs-comment"}},[e._v("# 禁用git钩子")]),e._v("\nlerna version --no-commit-hooks\n")])])]),e._v(" "),a("li",[a("p",[e._v("--conventional-commits")]),e._v(" "),a("p",[e._v("提交版本的时候，直接确定版本不用选择版本("),a("strong",[e._v("加0.1")]),e._v(")，并生成"),a("code",{pre:!0},[e._v("CHANGELOG")])]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("lerna version --conventional-commits\n")])])])]),e._v(" "),a("h1",[e._v("lerna create")]),e._v(" "),a("p",[e._v("创建一个新的项目")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("lerna create  [loc]\n\nCreate a new lerna-managed package\n\nPositionals:\n  name  项目的名字 [string] [required]\n  loc   项目的位置，默认是第一个项目创建的位置         [string]\n\nCommand Options:\n  --access        When using a scope, set publishConfig.access value\n                             [choices: "),a("span",{attrs:{class:"hljs-string"}},[e._v('"public"')]),e._v(", "),a("span",{attrs:{class:"hljs-string"}},[e._v('"restricted"')]),e._v("] [default: public]\n  --bin           Package has an executable. Customize with --bin\n                                               [default: ]\n  --description   Package description                                   [string]\n  --dependencies  A list of package dependencies                         [array]\n  --es-module     Initialize a transpiled ES Module\n  --homepage      The package homepage, defaulting to a subpath of the root\n                  pkg.homepage                                          [string]\n  --keywords      A list of package keywords                             [array]\n  --license       The desired package license (SPDX identifier)   [default: ISC]\n  --private       Make the new package private, never published\n  --registry      Configure the package"),a("span",{attrs:{class:"hljs-string"}},[e._v("'s publishConfig.registry        [string]\n  --tag           Configure the package'")]),e._v("s publishConfig.tag             [string]\n  --yes           Skip all prompts, accepting default values\n")])]),e._v(" "),a("h1",[e._v("安装各种依赖")]),e._v(" "),a("p",[e._v("在开发之前，肯定是需要先安装各种eslint、prettier、commit-lint等等规范化库的，我们为啥要把一堆package放到一个仓库？其中一个原因不就是为了直接复用一套规范文件么。")]),e._v(" "),a("p",[e._v("所以各种lint文件肯定是安装到项目全局的，这时如果使用lerna的安装命令:")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("lerna add eslint --dev\n")])]),e._v(" "),a("p",[e._v("就会发现一个问题，每个package都被单独安装了eslint，这明显是不合适的，既然是同一个项目，安装多次同一个模块算个什么事？")]),e._v(" "),a("p",[e._v("然后我们发现，lerna有提到如果你想只安装一次，那么可以把这些依赖写到每个package的package.json中，然后回到根目录运行:")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("lerna bootstrap --hoist\n")])]),e._v(" "),a("p",[e._v("bootstrap是learna一键为所有package安装依赖的命令，如果加上了--hoist参数，那么就是告诉lerna，把所有依赖全部安装到根目录中，然后分别在各自的文件夹中创建软连接指向对应的模块实际路径。")]),e._v(" "),a("p",[e._v("从解决问题的眼光来看，确实解决了重复安装的问题，不过所有模块都装到根目录混杂在一起，这让强迫症心里很不舒服，我们希望的其实是只有lint这些公共库提取出来，其他的他们自己的依赖放到他们自己的文件夹中。\n在参考了"),a("a",{attrs:{href:"https://github.com/babel/babel"}},[e._v("Babel")]),e._v("仓库的做法后，明白了。因为node自身在查找模块的时候有向父级目录查询的操作，所以其实软连接什么的并不需要，甚至都不需要lerna，我们直接")]),e._v(" "),a("pre",{pre:!0},[a("code",{attrs:{class:"hljs language-powershell"}},[e._v("yarn add -D eslint\n")])]),e._v(" "),a("p",[e._v("这样便直接将eslint安装到了根目录中，由于层级高，所以子目录都会受到lint规则的约束。同样，为此安装好husky等等基本库，完成仓库的初始化。")])])}],!1,null,null,null);s.default=t.exports},G9xt:function(e,s,a){(e.exports=a("I1BE")(!1)).push([e.i,"",""])},QhUf:function(e,s,a){e.exports=a("1XE3")},Z3He:function(e,s,a){var n=a("G9xt");"string"==typeof n&&(n=[[e.i,n,""]]),n.locals&&(e.exports=n.locals);(0,a("SZ7m").default)("223723e0",n,!0,{})}}]);