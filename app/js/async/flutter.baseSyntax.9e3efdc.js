(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{Bwrz:function(s,v,t){"use strict";t.r(v);var _=t("mPS5"),a={name:"FlutterBaseSyntax",components:{md:t.n(_).a}},r=t("JFUb");var e=function(s){t("mZx6")},l=Object(r.a)(a,function(){var s=this.$createElement,v=this._self._c||s;return v("div",[v("md")],1)},[],!1,e,"data-v-4639400a",null);v.default=l.exports},cwrQ:function(s,v,t){(s.exports=t("I1BE")(!1)).push([s.i,"",""])},mPS5:function(s,v,t){s.exports=t("q+DY")},mZx6:function(s,v,t){var _=t("cwrQ");"string"==typeof _&&(_=[[s.i,_,""]]),_.locals&&(s.exports=_.locals);(0,t("SZ7m").default)("d4833388",_,!0,{})},"q+DY":function(s,v,t){"use strict";t.r(v);var _=t("JFUb"),a=Object(_.a)(null,function(){var s=this;s.$createElement;s._self._c;return s._m(0)},[function(){var s=this,v=s.$createElement,t=s._self._c||v;return t("section",[t("h1",[s._v("Dart 支持的数据类型")]),s._v(" "),t("table",{staticClass:"table"},[t("thead",[t("tr",[t("th",[s._v("类型")]),s._v(" "),t("th",[s._v("含义")]),s._v(" "),t("th",[s._v("使用")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",{pre:!0},[s._v("int")])]),s._v(" "),t("td",[s._v("整数，范围为 -2^63 到 2^63 - 1.")]),s._v(" "),t("td",[s._v("int x = 1; // 没有小数点就是int")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("double")])]),s._v(" "),t("td",[s._v("浮点数，64位(双精度)浮点数")]),s._v(" "),t("td",[s._v("double x = 1.1; // 有小数点的就是浮点数")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("num")])]),s._v(" "),t("td",[s._v("num 是数字类型，既可以表示整数，也可以表示浮点数，具体看赋的值")]),s._v(" "),t("td",[s._v("num x = 1; // num x是整数"),t("br"),s._v("num x = 1.1; // num x是浮点数")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("String")])]),s._v(" "),t("td",[s._v("字符串"),t("br"),s._v(" Dart字符串采用UTF-16编码"),t("br"),s._v(" 可以使用单引号或双引号来创建字符串")]),s._v(" "),t("td",[s._v("String x = 'txt'"),t("br"),s._v(' String x = "txt"')])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("bool")])]),s._v(" "),t("td",[s._v("布尔值")]),s._v(" "),t("td",[s._v("bool isTrue = true;")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("List")])]),s._v(" "),t("td",[s._v("List<E></br>E表示List里的数据类型"),t("br"),s._v("用中括号来赋值")]),s._v(" "),t("td",[s._v("List<String> list = ['1', '2', '3']")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("Set")])]),s._v(" "),t("td",[s._v("Set<E>"),t("br"),s._v("E表示Set里的数据类型"),t("br"),s._v("用大括号来赋值")]),s._v(" "),t("td",[s._v("Set<int> set = { 1, 2, 3, 4, 5, 6 }")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("Map")])]),s._v(" "),t("td",[s._v("Map<K, V>"),t("br"),s._v("K是key的数据类型，V是value的数据类型")]),s._v(" "),t("td",[s._v("Map<String, int> map = { '1': 1, '2': 2, '3': 3, '4': 4 }")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("Runes")])]),s._v(" "),t("td",[s._v("表示采用 UTF-32 的字符串，用于显示 Unicode 因为Dart字符串是UTF-16，因此在Dart中表示32位的Unicode值需要Runes这个特殊语法。")]),s._v(" "),t("td",[s._v("Runes input = new Runes('\\u{1f600}');"),t("br"),s._v(" print(new String.fromCharCodes(input));"),t("br"),s._v(" 打印出来的是笑脸emoji：😆")])])])]),s._v(" "),t("p",[s._v("1、 "),t("code",{pre:!0},[s._v("var")]),s._v("也可以申明变量，一种声明变量而不指定其类型的方法。")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" content = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'Dart 语法'")]),s._v("; "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// Declare and initialize a variable.")]),s._v("\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" switchOn = "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("false")]),s._v(";\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" current = "),t("span",{attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n")])]),s._v(" "),t("div",{staticClass:"tip"},[t("p",[s._v("因为 ，var 并不是直接存储值，而是存储的值的对象的引用，例如：var content = 'Dart 语法' 这句，是名字为 content 的 var 变量存储了值为 'Dart 语法' 的 String 对象的引用，所以 var 才能定义任何变量。"),t("br")])]),s._v(" "),t("p",[s._v("当给"),t("code",{pre:!0},[s._v("var")]),s._v("变量赋值了之后，就确定了这个变量的数据类型，再重新赋值的时候，只能是初始赋值的数据类型。")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" x = "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),t("span",{attrs:{class:"hljs-comment"}},[s._v("// x只能赋值int类型")]),s._v("\nx = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'1'")]),s._v("; "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// ❌")]),s._v("\n")])]),s._v(" "),t("p",[s._v("2、"),t("code",{pre:!0},[s._v("$variableName")]),s._v(" 或 "),t("code",{pre:!0},[s._v("${expression}")])]),s._v(" "),t("p",[s._v("字符串插值：将变量的值直接插入字符串中。")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'123'")]),s._v(";\n"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" b = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'"),t("span",{attrs:{class:"hljs-subst"}},[s._v("${a}")]),s._v("456'")]),s._v(";\n"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" c = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'"),t("span",{attrs:{class:"hljs-subst"}},[s._v("$a456"),t("span",{attrs:{class:"hljs-string"}},[s._v("';\n")])])])])]),s._v(" "),t("p",[s._v("3、"),t("code",{pre:!0},[s._v("dynamic")]),s._v("（[daɪ'næmɪk]）")]),s._v(" "),t("p",[s._v("意思是数据类型是动态可变的，也可以定义任何变量，但是和"),t("code",{pre:!0},[s._v("var")]),s._v("不同的是，"),t("code",{pre:!0},[s._v("var")]),s._v("一旦赋值后，就不能改变数据类型了，但是"),t("code",{pre:!0},[s._v("dynamic")]),s._v("可以。")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("dynamic")]),s._v(" x = "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\nx = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'12'")]),s._v("; "),t("span",{attrs:{class:"hljs-comment"}},[s._v("//✅")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"warning"},[t("p",[s._v("请不要滥用"),t("code",{pre:!0},[s._v("dynamic")]),s._v("，一般情况下都可以用"),t("code",{pre:!0},[s._v("Object")]),s._v("代替"),t("code",{pre:!0},[s._v("dynamic")]),s._v("。"),t("br"),s._v("\n什么情况下使用：当这个变量没法用 Dart 的类型来表示时，比如 Native 和 Flutter 交互，从 Native 传来的数据。所以你会看到 PlatformChannel 里有很多地方使用到了"),t("code",{pre:!0},[s._v("dynamic")]),s._v("。")])]),s._v(" "),t("p",[s._v("4、"),t("code",{pre:!0},[s._v("Object")])]),s._v(" "),t("p",[s._v("Dart 里所有东西都是对象，是因为 Dart 的所有东西都继承自"),t("code",{pre:!0},[s._v("Object")]),s._v("，因此"),t("code",{pre:!0},[s._v("Object")]),s._v("可以定义任何变量，而且赋值后，类型也可以更改。")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(" x = "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\nx = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'12'")]),s._v("; "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// ✅")]),s._v("\n")])]),s._v(" "),t("p",[s._v("5、 常量: "),t("code",{pre:!0},[s._v("final")]),s._v("和"),t("code",{pre:!0},[s._v("const")])]),s._v(" "),t("p",[s._v("如果你不想更改变量的值，那么你可以用 final 和 const:")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("final")]),s._v(" x = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'1'")]),s._v(";\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("static")]),s._v(" "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("bool")]),s._v(" isTrue = "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("true")]),s._v(";\n")])]),s._v(" "),t("p",[s._v("常量有以下特点：")]),s._v(" "),t("ul",[t("li",[s._v("使用"),t("code",{pre:!0},[s._v("final")]),s._v("和"),t("code",{pre:!0},[s._v("const")]),s._v("的时候可以把"),t("code",{pre:!0},[s._v("var")]),s._v("省略")]),s._v(" "),t("li",[t("code",{pre:!0},[s._v("final")]),s._v("和"),t("code",{pre:!0},[s._v("const")]),s._v("变量只能赋值一次，而且只能在声明的时候就赋值")]),s._v(" "),t("li",[t("code",{pre:!0},[s._v("const")]),s._v("实际是隐式的"),t("code",{pre:!0},[s._v("final")])]),s._v(" "),t("li",[s._v("在使用"),t("code",{pre:!0},[s._v("const")]),s._v("的时候，如果变量是类里的变量，必须加"),t("code",{pre:!0},[s._v("static")]),s._v("，是全局变量时不需要加,例如:")])]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[s._v("mport "),t("span",{attrs:{class:"hljs-string"}},[s._v("'package:flutter/material.dart'")]),s._v(";\n\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" demoConst = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'demo'")]),s._v("; "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// 这里不用加 static")]),s._v("\n\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" main() => runApp(MyApp());\n\n"),t("span",{attrs:{class:"hljs-class"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{attrs:{class:"hljs-title"}},[s._v("MyApp")]),s._v(" "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" "),t("span",{attrs:{class:"hljs-title"}},[s._v("StatelessWidget")]),s._v(" ")]),s._v("{\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("static")]),s._v(" "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" content = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'Dart 语法'")]),s._v("; "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// 这里必须加 static")]),s._v("\n}\n")])]),s._v(" "),t("div",{staticClass:"tip"},[t("p",[s._v("以下划线"),t("code",{pre:!0},[s._v("_")]),s._v("开头的类或成员变量是私有的。"),t("br"),s._v("\nDart 没有 Public、Protected、Private 的关键字，在 Dart 里，类或成员变量默认都是 Public 的，以下划线 _ 开头的就是私有的，例如成员变量 _name 就是私有的。")])]),s._v(" "),t("h1",[s._v("函数")]),s._v(" "),t("p",[s._v("函数的格式如下：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-javascript"}},[s._v("返回类型 函数名(函数参数){\n\n}\n"),t("span",{attrs:{class:"hljs-comment"}},[s._v("// 没有返回值")]),s._v("\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" 函数名(函数参数) {\n\n}\n")])]),s._v(" "),t("p",[s._v("例如：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-built_in"}},[s._v("bool")]),s._v(" say ("),t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" content) {\n  "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("print")]),s._v("(content);\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("true")]),s._v(";\n}\n")])]),s._v(" "),t("p",[s._v("1、函数的类型是"),t("code",{pre:!0},[s._v("Function")])]),s._v(" "),t("p",[s._v("判断函数"),t("code",{pre:!0},[s._v("say")]),s._v("的类型是不是"),t("code",{pre:!0},[s._v("Function")]),s._v("，用"),t("code",{pre:!0},[s._v("is")]),s._v("来判断。")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-built_in"}},[s._v("print")]),s._v("(say "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("is")]),s._v(" "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v("); "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),t("p",[s._v("2、必选参数和可选参数")]),s._v(" "),t("p",[s._v("判断是必选参数还是可选参数：首先必选参数在前面，和普通的参数定义一样，后面跟可选参数，可选参数需要用"),t("code",{pre:!0},[s._v("{}")]),s._v("或者"),t("code",{pre:!0},[s._v("[]")]),s._v("包起来，用不同的括号，可选参数的意义与用法也不一样。")]),s._v(" "),t("p",[t("strong",[s._v("可选参数也分为两类：")])]),s._v(" "),t("p",[s._v("1、可选命名参数：使用 "),t("code",{pre:!0},[s._v("{}")]),s._v(" 包起来的参数是可选命名参数。")]),s._v(" "),t("p",[s._v("2、可选位置参数：使用 "),t("code",{pre:!0},[s._v("[]")]),s._v(" 包起来的参数是可选位置参数。")]),s._v(" "),t("ul",[t("li",[s._v("可选命名参数："),t("code",{pre:!0},[s._v("{}")])])]),s._v(" "),t("p",[s._v("用 "),t("code",{pre:!0},[s._v("{}")]),s._v(" 包起来的参数是可选命名参数，前面讲数据类型的时候，使用 "),t("code",{pre:!0},[s._v("{}")]),s._v(" 来赋值的数据类型是 "),t("code",{pre:!0},[s._v("Map")]),s._v("，所以可选的命名参数的类型也是 "),t("code",{pre:!0},[s._v("Map")]),s._v("， 因此调用函数时，可选参数的赋值必须是 "),t("code",{pre:!0},[s._v("paramName: value")]),s._v(" 这种 "),t("code",{pre:!0},[s._v("key: value")]),s._v(" 格式的，下面是可选命名参数的例子：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-built_in"}},[s._v("bool")]),s._v(" say("),t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" msg , {"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" from, "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("int")]),s._v(" clock}){\n  "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("print")]),s._v("(msg+"),t("span",{attrs:{class:"hljs-string"}},[s._v('" from "')]),s._v(" + from + "),t("span",{attrs:{class:"hljs-string"}},[s._v('" at "')]),s._v(" + clock.toString());\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("true")]),s._v(";\n}\n")])]),s._v(" "),t("p",[s._v("要调用 "),t("code",{pre:!0},[s._v("say")]),s._v(" 函数，方法如下：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[s._v("say("),t("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v("); "),t("span",{attrs:{class:"hljs-comment"}},[s._v("//✅ 因为 from 和 clock 是可选参数，所以可以不填")]),s._v("\n\nsay("),t("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v(",from: "),t("span",{attrs:{class:"hljs-string"}},[s._v("'XiaoMing'")]),s._v("); "),t("span",{attrs:{class:"hljs-comment"}},[s._v("//对 用命名参数格式 paramName: value 为 from 赋值")]),s._v("\nsay("),t("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v(",clock: "),t("span",{attrs:{class:"hljs-number"}},[s._v("11")]),s._v("); "),t("span",{attrs:{class:"hljs-comment"}},[s._v("//✅")]),s._v("\nsay("),t("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v(",from: "),t("span",{attrs:{class:"hljs-string"}},[s._v("'XiaoMing'")]),s._v(",clock: "),t("span",{attrs:{class:"hljs-number"}},[s._v("11")]),s._v("); "),t("span",{attrs:{class:"hljs-comment"}},[s._v("//✅")]),s._v("\n")])]),s._v(" "),t("p",[s._v("同时还可以给命名参数加 "),t("code",{pre:!0},[s._v("@required")]),s._v(" ，意思是这个也是必填参数，例子如下：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-built_in"}},[s._v("bool")]),s._v(" say ({ @required "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" content, "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("int")]),s._v(" time }) {\n  "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("print")]),s._v("(content);\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("true")]),s._v(";\n}\n")])]),s._v(" "),t("p",[s._v("这时候要调用 "),t("code",{pre:!0},[s._v("say")]),s._v(" 函数，方法如下：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[s._v("say();"),t("span",{attrs:{class:"hljs-comment"}},[s._v("//❌  错误调用方式，因为 from 是必选参数，不填的话会报错")]),s._v("\n\nsay(content: "),t("span",{attrs:{class:"hljs-string"}},[s._v("'XiaoMing'")]),s._v("); "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// ✅ 正确调用方式")]),s._v("\nsay(content: "),t("span",{attrs:{class:"hljs-string"}},[s._v("'XiaoMing'")]),s._v(",time: "),t("span",{attrs:{class:"hljs-number"}},[s._v("11")]),s._v("); "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// ✅ 这个调用方式也是正确的")]),s._v("\n")])]),s._v(" "),t("ul",[t("li",[s._v("可选位置参数："),t("code",{pre:!0},[s._v("[]")])])]),s._v(" "),t("p",[s._v("用 "),t("code",{pre:!0},[s._v("[]")]),s._v(" 包起来的参数是可选位置参数，前面讲数据类型的时候，使用 "),t("code",{pre:!0},[s._v("[]")]),s._v(" 来赋值的数据类型是 "),t("code",{pre:!0},[s._v("List")]),s._v("，所以可选的命名参数的类型也是 "),t("code",{pre:!0},[s._v("List")]),s._v("，所以赋值和参数是一一对应的，下面是可选位置参数的例子")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-built_in"}},[s._v("bool")]),s._v(" say("),t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" msg , ["),t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" from , "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("int")]),s._v(" clock]){\n  "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("print")]),s._v("(msg+"),t("span",{attrs:{class:"hljs-string"}},[s._v('" from "')]),s._v(" + from + "),t("span",{attrs:{class:"hljs-string"}},[s._v('" at "')]),s._v(" + clock.toString());\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("true")]),s._v(";\n}\n")])]),s._v(" "),t("p",[s._v("要给可选位置参数赋值时，必选按照顺序来赋值：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[s._v("say("),t("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v("); "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// ✅ 因为 from 和 clock 是可选参数，所以可以不填")]),s._v("\n\nsay("),t("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v(","),t("span",{attrs:{class:"hljs-string"}},[s._v("'XiaoMing'")]),s._v(","),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v("); "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// ✅ 为可选位置参数赋值，只能一个参数一个参数对应的赋值，所以要全部赋值")]),s._v("\n\nsay("),t("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v(","),t("span",{attrs:{class:"hljs-string"}},[s._v("'XiaoMing'")]),s._v(") "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// ✅")]),s._v("\nsay("),t("span",{attrs:{class:"hljs-string"}},[s._v("'Hello Flutter'")]),s._v(","),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// ❌ 因为  1 赋值给了 from,但是 from 是String，所以会报错")]),s._v("\n")])]),s._v(" "),t("ul",[t("li",[s._v("可选参数的默认值 ："),t("code",{pre:!0},[s._v("=")])])]),s._v(" "),t("p",[s._v("因为参数是可选的，那么参数的值很可能没有赋值，就是 "),t("code",{pre:!0},[s._v("null")]),s._v(" ，用到的时候就有可能会触发 NPE，所以可以给可选参数赋默认值。")]),s._v(" "),t("p",[s._v("使用 "),t("code",{pre:!0},[s._v("=")]),s._v(" 为可选参数赋默认值")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-built_in"}},[s._v("bool")]),s._v(" say("),t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" msg , {"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" from = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'empty'")]),s._v(", "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("int")]),s._v(" clock = "),t("span",{attrs:{class:"hljs-number"}},[s._v("0")]),s._v("}){\n  "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("print")]),s._v("(msg+"),t("span",{attrs:{class:"hljs-string"}},[s._v('" from "')]),s._v(" + from + "),t("span",{attrs:{class:"hljs-string"}},[s._v('" at "')]),s._v(" + clock.toString());\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("true")]),s._v(";\n}\n")])]),s._v(" "),t("h1",[t("code",{pre:!0},[s._v("=>")]),s._v(" ：箭头语法")]),s._v(" "),t("p",[t("code",{pre:!0},[s._v("=>")]),s._v(" 语法是 "),t("code",{pre:!0},[s._v("{ return expr; }")]),s._v(" 的简写，因为 "),t("code",{pre:!0},[s._v("=>")]),s._v(" 酷似箭头，也称箭头语法,也是 "),t("code",{pre:!0},[s._v("Lambda")]),s._v(" 表达式。")]),s._v(" "),t("div",{staticClass:"warning"},[t("p",[s._v("=> 语句后面只能跟一行代码，而且这一行代码只能一个表达式，而不能跟语句。表达式可以是函数、值。")])]),s._v(" "),t("p",[s._v("例如，"),t("code",{pre:!0},[s._v("main()")]),s._v(" 函数这里:")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" main() => runApp(MyApp());\n")])]),s._v(" "),t("p",[s._v("等价于:")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" main () {\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" runApp(MyApp()) "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// runApp也返回的是 void")]),s._v("\n}\n")])]),s._v(" "),t("h1",[s._v("类")]),s._v(" "),t("p",[s._v("Dart 中每个对象都是一个类的实例，所有类都继承自 Object。")]),s._v(" "),t("p",[s._v("1、自定义类")]),s._v(" "),t("p",[s._v("如下，我定义一个类 "),t("code",{pre:!0},[s._v("Point")]),s._v("：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-class"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{attrs:{class:"hljs-title"}},[s._v("Point")]),s._v(" ")]),s._v("{\n  "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("num")]),s._v(" x, y;\n\n  "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// 构造函数")]),s._v("\n  Point("),t("span",{attrs:{class:"hljs-built_in"}},[s._v("num")]),s._v(" x, "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("num")]),s._v(" y) {\n    "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".x = x;\n    "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".y = y;\n  }\n}\n")])]),s._v(" "),t("p",[s._v("2、默认构造函数的写法")]),s._v(" "),t("p",[s._v("默认的构造函数就是使用类名作为函数名的构造函数，例如上面写的类 "),t("code",{pre:!0},[s._v("Point")]),s._v(" 的构造函数："),t("code",{pre:!0},[s._v("Point(num x,num y)")]),s._v("。")]),s._v(" "),t("p",[s._v("3、构造函数的语法糖")]),s._v(" "),t("p",[s._v("Dart 里还有构造函数的语法糖，可以将构造函数改造为：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-class"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{attrs:{class:"hljs-title"}},[s._v("Point")]),s._v(" ")]),s._v("{\n  "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("num")]),s._v(" x, y;\n  Point("),t("span",{attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".x, "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".y);\n}\n")])]),s._v(" "),t("p",[s._v("这个语法糖会简化构造函数的赋值操作。")]),s._v(" "),t("p",[s._v("4、"),t("code",{pre:!0},[s._v("Widget")]),s._v(" 构造函数参数采用的是可选命名参数。")]),s._v(" "),t("p",[s._v("因为 "),t("code",{pre:!0},[s._v("Widget")]),s._v(" 构造函数有很多参数，为了使用起来清晰，"),t("code",{pre:!0},[s._v("Widget")]),s._v(" 构造函数的参数采用的是可选命名参数。")]),s._v(" "),t("p",[s._v("5、创建实例的时候不再需要"),t("code",{pre:!0},[s._v("new")]),s._v("。")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[s._v("Point point = Point("),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(");\n")])]),s._v(" "),t("p",[s._v("创建类实例的时候，都要写 "),t("code",{pre:!0},[s._v("new")]),s._v("，其实很麻烦的，而且也没有必要，所以 "),t("code",{pre:!0},[s._v("Dart")]),s._v(" 在创建实例的时候不在需要使用 "),t("code",{pre:!0},[s._v("new")]),s._v(" 。")]),s._v(" "),t("p",[s._v("6、使用类的变量")]),s._v(" "),t("p",[s._v("使用点 "),t("code",{pre:!0},[s._v(".")]),s._v(" 来引用实例变量或方法：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-built_in"}},[s._v("print")]),s._v("(point.x);\n")])]),s._v(" "),t("h1",[s._v("操作符")]),s._v(" "),t("p",[s._v("Dart 中定义了很多的操作符，分为以下几类：")]),s._v(" "),t("p",[s._v("1、算术运算操作符")]),s._v(" "),t("table",{staticClass:"table"},[t("thead",[t("tr",[t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("含义")]),s._v(" "),t("th",[s._v("例子")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",{pre:!0},[s._v("+")])]),s._v(" "),t("td",[s._v("加")]),s._v(" "),t("td",[s._v("var a = 2 + 3;")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("-")])]),s._v(" "),t("td",[s._v("减")]),s._v(" "),t("td",[s._v("var a = 2- 3;")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("-exper")])]),s._v(" "),t("td",[s._v("负数")]),s._v(" "),t("td",[s._v("var a = -1;")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("*")])]),s._v(" "),t("td",[s._v("乘")]),s._v(" "),t("td",[s._v("var a = 2 * 3;")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("/")])]),s._v(" "),t("td",[s._v("除，精确除法")]),s._v(" "),t("td",[s._v("var a = 3 / 2; // a的结果是1.5")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("~/")])]),s._v(" "),t("td",[s._v("整除")]),s._v(" "),t("td",[s._v("var a = 3 / 2; // a的结果是1")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("%")])]),s._v(" "),t("td",[s._v("取余")]),s._v(" "),t("td",[s._v("var a = 3 % 2; // a的结果是1")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("++var")])]),s._v(" "),t("td"),s._v(" "),t("td",[s._v("var a = 1;"),t("br"),s._v("var b = ++a; // b的结果是2，a的结果也是2")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("var++")])]),s._v(" "),t("td"),s._v(" "),t("td",[s._v("var a = 1;"),t("br"),s._v("var b = a++; // b的结果是1，a的结果是2")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("--var")])]),s._v(" "),t("td"),s._v(" "),t("td",[s._v("var a = 1;"),t("br"),s._v("var b = --a; // b的结果是0，a的结果也是0")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("var--")])]),s._v(" "),t("td"),s._v(" "),t("td",[s._v("var a = 1;"),t("br"),s._v("var b = a--; // b的结果是1，a的结果是0")])])])]),s._v(" "),t("p",[s._v("2、相等和大小关系操作符")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("含义")]),s._v(" "),t("th",[s._v("例子")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("==")])]),s._v(" "),t("td",[s._v("是否相等")]),s._v(" "),t("td",[s._v("assert(2 == 2);")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("!=")])]),s._v(" "),t("td",[s._v("不等于")]),s._v(" "),t("td",[s._v("assert(2 != 3);")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(">")])]),s._v(" "),t("td",[s._v("大于")]),s._v(" "),t("td",[s._v("assert(3 > 2);")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("<")])]),s._v(" "),t("td",[s._v("小于")]),s._v(" "),t("td",[s._v("assert(2 < 3);")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(">=")])]),s._v(" "),t("td",[s._v("大于等于")]),s._v(" "),t("td",[s._v("assert(3 >= 3);")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("<=")])]),s._v(" "),t("td",[s._v("小于等于")]),s._v(" "),t("td",[s._v("assert(3 <= 3);")])])])]),s._v(" "),t("p",[s._v("3、类型判断操作符")]),s._v(" "),t("table",{staticClass:"table"},[t("thead",[t("tr",[t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("含义")]),s._v(" "),t("th",[s._v("例子")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",{pre:!0},[s._v("as")])]),s._v(" "),t("td",[s._v("类型转换")]),s._v(" "),t("td",[s._v("(emp as Person).firstName = 'Bob';")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("is")])]),s._v(" "),t("td",[s._v("判断是否是某个类型,如果是的话，就返回 true")]),s._v(" "),t("td",[s._v("bool isPerson = emp is Person;")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("is!")])]),s._v(" "),t("td",[s._v("判断是否不是某个类型，如果不是的话，就返回 true")]),s._v(" "),t("td",[s._v("bool notIsPerson = emp is! Person;")])])])]),s._v(" "),t("div",{staticClass:"warning"},[t("p",[s._v("上面的例子中，如果 emp 是 null 的话，as 的例子就会抛异常，is 和 isn't 的例子会返回 false。")])]),s._v(" "),t("p",[s._v("4、赋值操作符")]),s._v(" "),t("p",[s._v("赋值操作符是 "),t("code",{pre:!0},[s._v("=")]),s._v("。")]),s._v(" "),t("p",[s._v("如果只想当被赋值的变量为空的时候才赋值，可以使用"),t("code",{pre:!0},[s._v("??=")]),s._v(",例如：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a, b;\na = "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\nb ?? = "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n")])]),s._v(" "),t("p",[t("code",{pre:!0},[s._v("=")]),s._v(" 还可以和其他操作符结合起来使用，例如:")]),s._v(" "),t("table",[t("tbody",[t("tr",[t("td",[t("code",[s._v("+=")])]),s._v(" "),t("td",[t("code",[s._v("-=")])]),s._v(" "),t("td",[t("code",[s._v("*=")])]),s._v(" "),t("td",[t("code",[s._v("/=")])]),s._v(" "),t("td",[t("code",[s._v("~/=")])]),s._v(" "),t("td",[t("code",[s._v("%=")])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(">>=")])]),s._v(" "),t("td",[t("code",[s._v("<<=")])]),s._v(" "),t("td",[t("code",[s._v("^=")])]),s._v(" "),t("td",[t("code",[s._v("&=")])]),s._v(" "),t("td",[t("code",[s._v("|=")])]),s._v(" "),t("td",[t("code",[s._v("??=")])])])])]),s._v(" "),t("p",[s._v("这些组合起来的操作符，意思是先进行操作，然后在赋值，例如：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("组合操作符")]),s._v(" "),t("th",[s._v("例子")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("+=")])]),s._v(" "),t("td",[s._v("a += b ; 就等效于  a = a + b;")])])])]),s._v(" "),t("p",[s._v("5、逻辑运算操作符")]),s._v(" "),t("table",{staticClass:"table"},[t("thead",[t("tr",[t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("含义")]),s._v(" "),t("th",[s._v("例子")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",{pre:!0},[s._v("!expr")])]),s._v(" "),t("td",[s._v("反转表达式（将false改为true，反之亦然）")]),s._v(" "),t("td",[s._v("bool isOk = !(2 == 3); // 结果为true")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("||")])]),s._v(" "),t("td",[s._v("逻辑或")]),s._v(" "),t("td",[s._v("bool isOk = (2 == 3) || (3 == 3); //结果为true")])]),s._v(" "),t("tr",[t("td",[t("code",{pre:!0},[s._v("&&")])]),s._v(" "),t("td",[s._v("逻辑与")]),s._v(" "),t("td",[s._v("bool isOk = (2 == 2) && (3 == 3); // 结果为true")])])])]),s._v(" "),t("p",[s._v("6、按位与移位运算符")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("含义")]),s._v(" "),t("th",[s._v("例子")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("&")])]),s._v(" "),t("td",[s._v("按位与"),t("br"),s._v("对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。")]),s._v(" "),t("td",[s._v("final value = 0x22;"),t("br"),s._v("final bitmask = 0x0f;"),t("br"),s._v("var result = value & bitmask;//结果为 0x02")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("|")])]),s._v(" "),t("td",[s._v("按位或，对于每一个比特位，当两个操作数相应的比特位至少有一个1时，结果为1，否则为0。")]),s._v(" "),t("td",[s._v("final value = 0x22;"),t("br"),s._v("final bitmask = 0x0f;"),t("br"),s._v("var result = value")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("^")])]),s._v(" "),t("td",[s._v("按位异或，对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。")]),s._v(" "),t("td",[s._v("final value = 0x22;"),t("br"),s._v("final bitmask = 0x0f;"),t("br"),s._v("var result = value ^ bitmask;//结果为 0x2d")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("~expr")])]),s._v(" "),t("td",[s._v("按位非，反转操作数的比特位，即0变成1，1变成0。")]),s._v(" "),t("td",[s._v("final value = 0x22;"),t("br"),s._v("final bitmask = 0x0f;"),t("br"),s._v("var result = value &  ~bitmask;//结果为 0x20")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("<<")])]),s._v(" "),t("td",[s._v("左移")]),s._v(" "),t("td",[s._v("final value = 0x22;"),t("br"),s._v("final bitmask = 0x0f;"),t("br"),s._v("var result = value << 4;//结果为 0x220")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(">>")])]),s._v(" "),t("td",[s._v("右移")]),s._v(" "),t("td",[s._v("final bitmask = 0x0f;"),t("br"),s._v("var result = value >> 4;//结果为 0x02")])])])]),s._v(" "),t("p",[s._v("7、条件运算符")]),s._v(" "),t("p",[s._v("Dart 有两个运算符，可以让您使用更简单的表达式来代替可能需要 if-else 语句的表达式：")]),s._v(" "),t("ul",[t("li",[s._v("condition ? expr1 : expr2（js里面的三元运算符）")])]),s._v(" "),t("p",[s._v("如果 condition 是 true，返回 expr1，否则返回 expr2。")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" visibility = isPublic ? "),t("span",{attrs:{class:"hljs-string"}},[s._v("'public'")]),s._v(" : "),t("span",{attrs:{class:"hljs-string"}},[s._v("'private'")]),s._v(";\n")])]),s._v(" "),t("ul",[t("li",[s._v("expr1 ?? expr2")])]),s._v(" "),t("p",[s._v("如果 expr1 为 null，就返回 expr2 的值，否则返回 expr1 的值。")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" test ("),t("span",{attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(" name) => name ?? "),t("span",{attrs:{class:"hljs-string"}},[s._v("'hfc'")]),s._v("\n")])]),s._v(" "),t("p",[s._v("8、级联操作符")]),s._v(" "),t("p",[s._v("级联操作符是 "),t("code",{pre:!0},[s._v("..")]),s._v(",允许你对同一对象进行一系列的操作。除了函数调用，您还可以访问同一对象上的字段。这通常可以为您节省创建临时变量的步骤，并允许您编写更多流畅的代码。")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-built_in"}},[s._v("querySelector")]),s._v("("),t("span",{attrs:{class:"hljs-string"}},[s._v("'#confirm'")]),s._v(") "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// Get an object.")]),s._v("\n  ..text = "),t("span",{attrs:{class:"hljs-string"}},[s._v("'Confirm'")]),s._v(" "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// Use its members.")]),s._v("\n  ..classes.add("),t("span",{attrs:{class:"hljs-string"}},[s._v("'important'")]),s._v(")\n  ..onClick.listen((e) => "),t("span",{attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".alert("),t("span",{attrs:{class:"hljs-string"}},[s._v("'Confirmed!'")]),s._v("));\n")])]),s._v(" "),t("p",[s._v("querySelector() 返回一个 selector 对象，后面的 ..text、..classes、..onClick就是在 selector 对象上进行的。")]),s._v(" "),t("p",[s._v("9、其他操作符")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("含义")]),s._v(" "),t("th",[s._v("例子")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("()")])]),s._v(" "),t("td",[s._v("函数调用")]),s._v(" "),t("td",[s._v("代表函数调用")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("[]")])]),s._v(" "),t("td",[s._v("访问列表")]),s._v(" "),t("td",[s._v("引用列表中指定索引处的值")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(".")])]),s._v(" "),t("td",[s._v("访问成员变量")]),s._v(" "),t("td",[s._v("访问表达式里的成员变量，例如 "),t("code",[s._v("foo.bar")]),s._v(",表示访问 "),t("code",[s._v("foo")]),s._v(" 表达式里的 "),t("code",[s._v("bar")]),s._v(" 成员变量")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("?.")])]),s._v(" "),t("td",[s._v("有条件的成员变量访问")]),s._v(" "),t("td",[s._v("很像 "),t("code",[s._v(".")]),s._v("，但是左边的表达式可以为 null，例如 "),t("code",[s._v("foo?.bar")]),s._v("，如果 foo 为 null，则不会抛异常，而是返回 null，如果 foo 不为 null，则可以返回 bar")])])])]),s._v(" "),t("p",[s._v("在说一下 Dart 里很好用但容易搞混的几个操作符："),t("code",{pre:!0},[s._v("?.")]),s._v("、 "),t("code",{pre:!0},[s._v("??")]),s._v(" 、"),t("code",{pre:!0},[s._v("??=")])]),s._v(" "),t("ul",[t("li",[s._v("?.")])]),s._v(" "),t("p",[s._v("想要访问表达式的某个属性时，就可以使用这个，可以有效避免 NPE。")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" yourName = user?.name;\n")])]),s._v(" "),t("p",[s._v("等效于：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" yourName;\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(user == "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v("){\n    yourName = "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v(";\n}"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v("{\n    yourName = user.name;\n}\n")])]),s._v(" "),t("ul",[t("li",[s._v("??")])]),s._v(" "),t("p",[s._v("在赋值时，可以使用 "),t("code",{pre:!0},[s._v("??")]),s._v("，若发现为空，可以为其赋默认值。 例如:")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" yourName = name ?? "),t("span",{attrs:{class:"hljs-string"}},[s._v('"Bob"')]),s._v(";\n")])]),s._v(" "),t("p",[s._v("等价于：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" yourName;\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(name == "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v("){\n    yourName = "),t("span",{attrs:{class:"hljs-string"}},[s._v('"Bob"')]),s._v(";\n}"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v("{\n    yourName = name;\n}\n")])]),s._v(" "),t("ul",[t("li",[s._v("??=")])]),s._v(" "),t("p",[s._v("expr1 ??= expr2 等效于 expr1 = expr1 ?? expr2 就是判断 expr1 是否为null，如果为null的话，就使用默认值 expr2。 例如：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[s._v("user ??= User();\n")])]),s._v(" "),t("p",[s._v("等价于：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{class:"hljs language-dart"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(user == "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("null")]),s._v(") {\n  user = User();\n}\n")])])])}],!1,null,null,null);v.default=a.exports}}]);